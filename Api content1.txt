Intro to APIS:-

What are APIS?
- Api are Application Programing interface is a computing interface which defines interactions between multiple software intermediaries.

JSON
-Java Script Object Notation
-way of formatting data which is easily readable for browser
- 


Using Hoppscotch (or Postman)
-alter software for api testing

HTTP verbs
-there are multiple responses :-
• GET - retrive information
• POST - send data at its destination
• DELETE - to remove somethings from api data
•


HTTP Status Codes
• 200 - success
• 300 - redirection error
• 400 - client side 
• 500 - internal server error
• 

Understanding Query Strings
- URL ?object=description&object=description

HTTP Headers
- pair of information which goes along with request
- 


Makings XHRs
- const req = new XMLHttpRequest();

    req.onload = function () {
      console.log('thiss :>> ', this);
      let data = this.responseText;
      console.log('data :>> ', data);
    }
    req.onerror = function (params) {
      console.log('error :>> ');
      console.log('thiss :>> ', this);
    }

    req.open("GET", "https://swapi.dev/api/people/1/")
    req.send();
	
	
Using The Fetch API
- fetch("URL").then().catch()
- fetch gives us data but in locked format ie Response body.
- need to parse it using json().
-

AXIOS
-a library for making http requests
-axios has get method for alternate of api calls
-


Setting Headers With Axios
-  const config = {headers:{Accept:'application/json'}}

      const res = await axios.get("https://swapi.dev/api/people/1/", config)
      console.log('res :>> ', res);
      console.log('dataname :>> ', res.data.name);



TV Show Search App
- Done

Factory Fuction
- The function which returns a result on passing a input, param, method into a function

Basic Terminal function
- ls , ls -l,cd, relative path and absolute path , mrdir, touch , rm , rmdir, rmdir -rf [recersive force]

Introduction to Nodejs
-
-used in Netflix,Uber,Videogames [Cross-Code],
-commands
1)



NODE JS

process and argv
- process gives information about ,and control over node.js process.
- process can be termed as instance of the EventEmitter

argv
-The process.argv property returns an array containing the command-line arguments passed when the Node.js process was launched


NODE REPL
- node -> gives node versions
- global -> 

All-important Package.json
- npm init - generally used to create custom 


Express FrameWork 
-Starts up a server to listen for requests
-parse incoming requests
-match those requests to particular routes
-craft our http request  and 

Intro 
-Difference between library | FrameWork
• Library - When you use a library , you are in charge. You control the flow of the application code and you decide when to use library.
• FrameWork - With frameworks, that control is inverted . The framework is in charge and you are merely a participant.it tells you where to plug in code.

- Templating
• Templating allows us to define a preset"pattern" for a webpage.

- Passing data to template
• by using render method a data can be transferred from route to template in form of object 
eg ==>
======================
argv.js
app.get('/random',(req,res)=>{
    const RNum = Math.floor(Math.random() * 10) + 1; //! parameter
        res.render('random', { num : RNum }) //! passed the parameter in num object
})
-------------------
random .ejs
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>Random</title>
</head>
<body>
   <h1>This is random page <%= num %></h1>
</body>
</html>

==================

Bootstrap interaction with express 
- download bootstrap and give the respective folder

Partials
- systematic way of rendering common elements by using include metode
eg==>
<%- include('partials/head') %> //include method to render a particular page

<body>
    <%- include('partials/navbar') %>
    
      <container>
    <h1>This is a Cat page</h1>

    <ul>
       <% for(let cat of Cats){ %>
            <li><%= cat %></li>
      <%  } %>

    </ul>
    </container>
</body>
<%- include('partials/Footer') %>

GET VS POST request
-GET :- 
	•used to retrieve information
	•data is sent via query string
	•information is plainly visible in URLs
	•limited amount of data can be sent
-POST :-
	•used to sent data to the server
	•used to write/create/update
	•Data is sent via request body not a query string
	•Can send any sort of data (JSON!)
	
Defining express post routes
- refer Restdemo

Parsing the request body
- app.use(express.urlencoded({extended:true}))  //? url encoded payloads
	app.use(express.json())  //? json encoded format
	
- app.post('/optimus',(req,res)=>{
    console.log(req.body);
    const {Name,Age} =  req.body;
    res.send(`Hi Master ${Name}[${Age}],<h3>Post</h3>`)
})

REST [Representational State Transfer]
	